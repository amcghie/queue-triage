buildscript {
    ext {
        dependencyManagementPluginVersion = '1.0.4.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.8.0'
        classpath 'com.tngtech.jgiven:jgiven-gradle-plugin:0.15.3'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.9.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'org.sonarqube'

scmVersion {
    tag {
        prefix = 'queue-triage'
        initialVersion = { tag, position -> '1.0.0' }
    }
    repository {
        pushTagsOnly = true
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    project.version = scmVersion.version

    test {
        testLogging {
            events 'failed'
            exceptionFormat 'full'
        }
    }
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}


tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply from: 'dependency_config.gradle'
apply from: 'project_dependencies_config.gradle'
apply from: 'application_rpm_config.gradle'
apply from: 'database_rpm_config.gradle'
